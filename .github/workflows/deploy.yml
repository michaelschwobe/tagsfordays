name: 🚀 Deploy

on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  lint:
    name: ⬣ ESLint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # If changing these, match the same values from:
        # - `/Dockerfile`
        # - `/package.json`
        node-version: [21.4.0]
        pnpm-version: [8.12.1]
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ matrix.pnpm-version }}

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install

      - name: 🔌 Generate database types
        run: pnpm exec prisma generate

      - name: 🔬 Lint
        run: pnpm run lint

  typecheck:
    name: ʦ TypeScript
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # If changing these, match the same values from:
        # - `/Dockerfile`
        # - `/package.json`
        node-version: [21.4.0]
        pnpm-version: [8.12.1]
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ matrix.pnpm-version }}

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install

      - name: 🔌 Generate database types
        run: pnpm exec prisma generate

      - name: 🔎 Type check
        run: pnpm run typecheck

  vitest:
    name: ⚡ Vitest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # If changing these, match the same values from:
        # - `/Dockerfile`
        # - `/package.json`
        node-version: [21.4.0]
        pnpm-version: [8.12.1]
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🏄 Copy test env vars
        run: cp .env.example .env

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ matrix.pnpm-version }}

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install

      - name: 🔌 Generate database types
        run: pnpm exec prisma generate

      - name: ⚡ Run vitest
        run: pnpm run coverage

  playwright:
    name: 🎭 Playwright
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        # If changing these, match the same values from:
        # - `/Dockerfile`
        # - `/package.json`
        node-version: [21.4.0]
        pnpm-version: [8.12.1]
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🏄 Copy test env vars
        run: cp .env.example .env

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ matrix.pnpm-version }}

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install

      - name: 📥 Install Playwright Browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: 🛠 Setup Database
        run: pnpm exec prisma migrate deploy

      - name: 🏦 Cache Database
        id: db-cache
        uses: actions/cache@v3
        with:
          path: prisma/data.db
          key: db-cache-schema_${{ hashFiles('./prisma/schema.prisma') }}-migrations_${{ hashFiles('./prisma/migrations/*/migration.sql') }}

      - name: 🌱 Seed Database
        if: steps.db-cache.outputs.cache-hit != 'true'
        run: pnpm exec prisma db seed
        env:
          MINIMAL_SEED: true

      - name: 🏗 Build
        run: pnpm run build

      - name: 🎭 Playwright tests
        run: pnpm exec playwright test

      - name: 📊 Upload report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [typecheck, lint, vitest, playwright]
    strategy:
      matrix:
        # If changing this, match the same value from:
        # - Running `flyctl version` on your local machine
        flyctl-version: [0.1.132]
    if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.0.2
        id: app_name
        with:
          file: "fly.toml"
          field: "app"

      - name: 🎈 Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: ${{ matrix.flyctl-version }}

      - name: 🚀 Deploy Staging
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: flyctl deploy --remote-only --build-arg COMMIT_SHA=${{ github.sha }} --app ${{ steps.app_name.outputs.value }}-staging
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🚀 Deploy Production
        if: ${{ github.ref == 'refs/heads/main' }}
        run: flyctl deploy --remote-only --build-arg COMMIT_SHA=${{ github.sha }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
