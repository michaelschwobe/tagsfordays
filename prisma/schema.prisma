// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @unique @default(cuid())
  username  String     @unique
  //
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  //
  bookmarks Bookmark[]
  books     Book[]
  password  Password?
  profile   Profile?
  tags      Tag[]
}

model Profile {
  name      String?
  email     String  @unique
  biography String?
  //
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String  @unique
}

model Password {
  hash   String
  //
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Tag {
  id        String          @id @unique @default(cuid())
  name      String          @unique
  //
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  //
  bookmarks TagOnBookmark[]
  books     TagOnBook[]

  //
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model TagOnBookmark {
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId      String
  //
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookmarkId String

  @@id([tagId, bookmarkId])
}

model TagOnBook {
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId  String
  //
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId String

  @@id([tagId, bookId])
}

model Bookmark {
  id        String           @id @default(cuid())
  url       String           @unique
  title     String?
  content   String?
  favorite  Boolean?         @default(false)
  //
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  //
  books     BookmarkOnBook[]
  tags      TagOnBookmark[]
  //
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model BookmarkOnBook {
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookmarkId String
  //
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId     String

  @@id([bookmarkId, bookId])
}

model Book {
  id        String           @id @default(cuid())
  title     String           @unique
  content   String?
  favorite  Boolean?         @default(false)
  //
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  //
  bookmarks BookmarkOnBook[]
  tags      TagOnBook[]
  //
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}
